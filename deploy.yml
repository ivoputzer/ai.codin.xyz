# Ansible Playbook
#Â Local (to change docker runtime config): ansible-playbook --extra-vars='ensure_mount_points=no copy_docker_image=no github_repository_name=ai.codin.xyz' --user=ubuntu -i ns501369.ip-192-99-14.net, deploy.yml
# Remote (to deploy application from scratch): See .github/workflows/deploy.yml
- hosts: all
  become: yes
  gather_facts: no
  vars:
    ansible_python_interpreter: /usr/bin/python3
    # copy_docker_image: no
    # ensure_mount_points: yes
    # needs_ffmpeg: yes
  tasks:
  # - name: Copy {{ github_repository_name }}.tar docker image source
  #   when: copy_docker_image | bool
  #   ansible.builtin.copy:
  #     src: "{{ github_repository_name }}.tar"
  #     dest: "/tmp/{{ github_repository_name }}.tar"
  #     force: yes
  # - name: Load {{ github_repository_name }} docker image
  #   when: copy_docker_image | bool
  #   community.general.docker_image:
  #     source: load
  #     force_source: true
  #     name: "{{ github_repository_name }}"
  #     load_path: /tmp/{{ github_repository_name }}.tar
  # - name: "Create volume mount-points in /data/{{ github_repository_name }}"
  #   # when: ensure_mount_points | bool
  #   ansible.builtin.file:
  #     path: "/data/{{ github_repository_name }}/{{ item }}"
  #     state: directory
  #     owner: root
  #     group: root
  #     mode: 0775
  #   loop:
  #     - "models"
  #     - "images"
  - name: "Start {{ github_repository_name }} docker container"
    community.general.docker_container:
      name: "{{ github_repository_name }}"
      image: "{{ github_repository_name }}"
      networks:
        - name: traefik
      volumes:
        - "/data/{{ github_repository_name }}/models:/models:cached"
        - "/data/{{ github_repository_name }}/images:/images:rw"
      env:
        ADDRESS: ":80"
        MODELS_PATH: "/models"
        CONTEXT_SIZE: "4096"
        DEBUG: "true"
        THREADS: "8"
        UPLOAD_LIMIT: "100"
      restart: true
      restart_policy: "unless-stopped"
      container_default_behavior: no_defaults
      networks_cli_compatible: no
      state: started
      labels:
        traefik.enable: 'true'
        traefik.http.routers.ai-codin-xyz.rule: "Host(`{{ github_repository_name }}`)"
        traefik.http.routers.ai-codin-xyz.entrypoints: https
        traefik.http.routers.ai-codin-xyz.tls: 'true'
        traefik.http.routers.ai-codin-xyz.tls.certresolver: le-http
        # traefik.http.routers.ai-codin-xyz.tls.certresolver: le-dns-cloudflare
        # traefik.http.routers.ai-codin-xyz.tls.domains[0].main: "{{ github_repository_name }}"
        # traefik.http.routers.ai-codin-xyz.tls.domains[0].sans: "*.codin.xyz"
        traefik.http.services.ai-codin-xyz.loadbalancer.server.port: "80"
      command_handling: "correct"
      # entrypoint simplifies below tasks and shortens the build: https://github.com/go-skynet/LocalAI/blob/a035de2fdd60d1ce1cce1fb8f4b629f0d68bc258/README.md?plain=1#L596
      # entrypoint:
      #   - /bin/bash
      #   - -c
      #   - |
      #     set -eo pipefail
      #     cd /build
      #     make build GO_TAGS=stablediffusion LLAMA_OPENBLAS=1
      #     /build/local-ai "$@"
      # command: [ "/usr/bin/local-ai" ]
      # healthcheck:
      #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8080/models"]
      #   interval: 30s
      #   timeout: 10s
      #   retries: 120
